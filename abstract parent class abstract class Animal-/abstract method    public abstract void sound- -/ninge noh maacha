//abstract parent class
abstract class Animal{
   //abstract method
   public abstract void sound();
}
//Dog class extends Animal class
public class Dog extends Animal{

   public void sound(){
	System.out.println("Woof");
   }
   public static void main(String args[]){
	Animal obj = new Dog();
	obj.sound();
   }
}
-------------------------------------------------------
class NoteBook{
   /*This is default constructor. A constructor does
    * not have a return type and it's name
    * should exactly match with class name
    */
   NoteBook(){
      System.out.println("Default constructor");
   }
   public void mymethod()
   {
      System.out.println("Void method of the class");
   }
   public static void main(String args[]){
	/* new keyword creates the object of the class
         * and invokes constructor to initialize object
         */
	NoteBook obj = new NoteBook();
	obj.mymethod();
   }
}
-------------------------------------------------------------------\
class Example{
   
   Example(){
      System.out.println("Default constructor");
   }
   
   Example(int i, int j){
      System.out.println("constructor with Two parameters");
   }
   
   Example(int i, int j, int k){
      System.out.println("constructor with Three parameters");	      
   }
	   
   
   Example(int i, String name){
      System.out.println("constructor with int and String param");
   }
   public static void main(String args[]){
     
      Example obj = new Example();
      Example obj2 = new Example(12, 12);
      Example obj3 = new Example(1, 2, 13);
      Example obj4 = new Example(1,"BeginnersBook");
   }
}
-----------------------------------------------------------------------------
class Outer_Demo {
   int num;
   
   // inner class
   private class Inner_Demo {
      public void print() {
         System.out.println("This is an inner class");
      }
   }
   
   // Accessing he inner class from the method within
   void display_Inner() {
      Inner_Demo inner = new Inner_Demo();
      inner.print();
   }
}
   
public class My_class {

   public static void main(String args[]) {
      // Instantiating the outer class 
      Outer_Demo outer = new Outer_Demo();
      
      // Accessing the display_Inner() method.
      outer.display_Inner();
   }
}
-------------------------------------------------------------------
  //Superclass 
class Superclass
{
   int num = 100;
}
//subclass 
class Subclass extends Superclass
{

    int num = 110;
    void printNumber(){
	System.out.println(num);
    }
    public static void main(String args[]){
	Subclass obj= new Subclass();
	obj.printNumber();	
    }
}
-------------------------------------------------------------------
//Java Program to demonstrate the way of passing an array  
//to method.  
class Testarray2{  
//creating a method which receives an array as a parameter  
static void min(int arr[]){  
int min=arr[0];  
for(int i=1;i<arr.length;i++)  
 if(min>arr[i])  
  min=arr[i];  
  
System.out.println(min);  
}  
  
public static void main(String args[]){  
int a[]={33,3,4,5};//declaring and initializing an array  
min(a);//passing array to method  
}}  
-------------------------------------------------------------------
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  


